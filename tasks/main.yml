---
- debug: msg="ansible_architecture {{ ansible_architecture }}, ansible_os_family {{ ansible_os_family }}, ansible_distribution {{ ansible_distribution }}"
- debug: msg="ansible_distribution_release {{ ansible_distribution_release }}, ansible_distribution_version {{ ansible_distribution_version }}"

# Include variables and define needed variables.
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

# Setup/install tasks.
#- include: "deps-{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml"
#  static: no
#  when: ansible_distribution_release == "trusty"

- include: "deps-{{ ansible_os_family }}.yml"
  static: no

#- include: "install-pip.yml"
#  static: no

#- include: "install-docker-py.yml"
#  static: no

#- include: "docker-engine-{{ ansible_distribution }}.yml"
#  static: no
#  become: yes
#  become_user: root
#  become_method: sudo
#
#- include: "docker-machine.yml"
#  static: no
#
#- include: "docker-compose.yml"
#  static: no
#
## Create a system group for Docker
## and add any user defined in “docker_users” variable to this group,
## and it will copy template for Docker configuration then restart Docker.
#- name: Create a docker group
#  group:
#    name=docker
#    state=present
#  become: yes
#  become_user: root
#  become_method: sudo
#
#- name: Add user(s) to docker group
#  user:
#    name={{ item }}
#    group=docker
#    state=present
#  with_items: docker_users
#  when: docker_users is defined
#  become: yes
#  become_user: root
#  become_method: sudo
#
#- name: Create oss-network
#  docker_network:
#    name: oss-network
#  when: create_docker_local_network
#  become: yes
#  become_user: root
#  become_method: sudo
